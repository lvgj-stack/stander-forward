// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newUserDailyTraffic(db *gorm.DB, opts ...gen.DOOption) userDailyTraffic {
	_userDailyTraffic := userDailyTraffic{}

	_userDailyTraffic.userDailyTrafficDo.UseDB(db, opts...)
	_userDailyTraffic.userDailyTrafficDo.UseModel(&entity.UserDailyTraffic{})

	tableName := _userDailyTraffic.userDailyTrafficDo.TableName()
	_userDailyTraffic.ALL = field.NewAsterisk(tableName)
	_userDailyTraffic.CreatedAt = field.NewTime(tableName, "created_at")
	_userDailyTraffic.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userDailyTraffic.DeletedAt = field.NewField(tableName, "deleted_at")
	_userDailyTraffic.Date = field.NewTime(tableName, "date")
	_userDailyTraffic.TotalTraffic = field.NewInt64(tableName, "total_traffic")
	_userDailyTraffic.UserID = field.NewInt32(tableName, "user_id")

	_userDailyTraffic.fillFieldMap()

	return _userDailyTraffic
}

type userDailyTraffic struct {
	userDailyTrafficDo userDailyTrafficDo

	ALL          field.Asterisk
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Date         field.Time
	TotalTraffic field.Int64 // 消耗
	UserID       field.Int32

	fieldMap map[string]field.Expr
}

func (u userDailyTraffic) Table(newTableName string) *userDailyTraffic {
	u.userDailyTrafficDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDailyTraffic) As(alias string) *userDailyTraffic {
	u.userDailyTrafficDo.DO = *(u.userDailyTrafficDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDailyTraffic) updateTableName(table string) *userDailyTraffic {
	u.ALL = field.NewAsterisk(table)
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Date = field.NewTime(table, "date")
	u.TotalTraffic = field.NewInt64(table, "total_traffic")
	u.UserID = field.NewInt32(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userDailyTraffic) WithContext(ctx context.Context) *userDailyTrafficDo {
	return u.userDailyTrafficDo.WithContext(ctx)
}

func (u userDailyTraffic) TableName() string { return u.userDailyTrafficDo.TableName() }

func (u userDailyTraffic) Alias() string { return u.userDailyTrafficDo.Alias() }

func (u userDailyTraffic) Columns(cols ...field.Expr) gen.Columns {
	return u.userDailyTrafficDo.Columns(cols...)
}

func (u *userDailyTraffic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDailyTraffic) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["date"] = u.Date
	u.fieldMap["total_traffic"] = u.TotalTraffic
	u.fieldMap["user_id"] = u.UserID
}

func (u userDailyTraffic) clone(db *gorm.DB) userDailyTraffic {
	u.userDailyTrafficDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDailyTraffic) replaceDB(db *gorm.DB) userDailyTraffic {
	u.userDailyTrafficDo.ReplaceDB(db)
	return u
}

type userDailyTrafficDo struct{ gen.DO }

func (u userDailyTrafficDo) Debug() *userDailyTrafficDo {
	return u.withDO(u.DO.Debug())
}

func (u userDailyTrafficDo) WithContext(ctx context.Context) *userDailyTrafficDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDailyTrafficDo) ReadDB() *userDailyTrafficDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDailyTrafficDo) WriteDB() *userDailyTrafficDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDailyTrafficDo) Session(config *gorm.Session) *userDailyTrafficDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDailyTrafficDo) Clauses(conds ...clause.Expression) *userDailyTrafficDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDailyTrafficDo) Returning(value interface{}, columns ...string) *userDailyTrafficDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDailyTrafficDo) Not(conds ...gen.Condition) *userDailyTrafficDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDailyTrafficDo) Or(conds ...gen.Condition) *userDailyTrafficDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDailyTrafficDo) Select(conds ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDailyTrafficDo) Where(conds ...gen.Condition) *userDailyTrafficDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDailyTrafficDo) Order(conds ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDailyTrafficDo) Distinct(cols ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDailyTrafficDo) Omit(cols ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDailyTrafficDo) Join(table schema.Tabler, on ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDailyTrafficDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDailyTrafficDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDailyTrafficDo) Group(cols ...field.Expr) *userDailyTrafficDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDailyTrafficDo) Having(conds ...gen.Condition) *userDailyTrafficDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDailyTrafficDo) Limit(limit int) *userDailyTrafficDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDailyTrafficDo) Offset(offset int) *userDailyTrafficDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDailyTrafficDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDailyTrafficDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDailyTrafficDo) Unscoped() *userDailyTrafficDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDailyTrafficDo) Create(values ...*entity.UserDailyTraffic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDailyTrafficDo) CreateInBatches(values []*entity.UserDailyTraffic, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDailyTrafficDo) Save(values ...*entity.UserDailyTraffic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDailyTrafficDo) First() (*entity.UserDailyTraffic, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserDailyTraffic), nil
	}
}

func (u userDailyTrafficDo) Take() (*entity.UserDailyTraffic, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserDailyTraffic), nil
	}
}

func (u userDailyTrafficDo) Last() (*entity.UserDailyTraffic, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserDailyTraffic), nil
	}
}

func (u userDailyTrafficDo) Find() ([]*entity.UserDailyTraffic, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserDailyTraffic), err
}

func (u userDailyTrafficDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserDailyTraffic, err error) {
	buf := make([]*entity.UserDailyTraffic, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDailyTrafficDo) FindInBatches(result *[]*entity.UserDailyTraffic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDailyTrafficDo) Attrs(attrs ...field.AssignExpr) *userDailyTrafficDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDailyTrafficDo) Assign(attrs ...field.AssignExpr) *userDailyTrafficDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDailyTrafficDo) Joins(fields ...field.RelationField) *userDailyTrafficDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDailyTrafficDo) Preload(fields ...field.RelationField) *userDailyTrafficDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDailyTrafficDo) FirstOrInit() (*entity.UserDailyTraffic, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserDailyTraffic), nil
	}
}

func (u userDailyTrafficDo) FirstOrCreate() (*entity.UserDailyTraffic, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserDailyTraffic), nil
	}
}

func (u userDailyTrafficDo) FindByPage(offset int, limit int) (result []*entity.UserDailyTraffic, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDailyTrafficDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDailyTrafficDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDailyTrafficDo) Delete(models ...*entity.UserDailyTraffic) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDailyTrafficDo) withDO(do gen.Dao) *userDailyTrafficDo {
	u.DO = *do.(*gen.DO)
	return u
}
