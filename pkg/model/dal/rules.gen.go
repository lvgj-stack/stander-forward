// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newRule(db *gorm.DB, opts ...gen.DOOption) rule {
	_rule := rule{}

	_rule.ruleDo.UseDB(db, opts...)
	_rule.ruleDo.UseModel(&entity.Rule{})

	tableName := _rule.ruleDo.TableName()
	_rule.ALL = field.NewAsterisk(tableName)
	_rule.ID = field.NewInt64(tableName, "id")
	_rule.CreatedAt = field.NewTime(tableName, "created_at")
	_rule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_rule.DeletedAt = field.NewField(tableName, "deleted_at")
	_rule.RuleName = field.NewString(tableName, "rule_name")
	_rule.NodeID = field.NewInt64(tableName, "node_id")
	_rule.ChainID = field.NewInt64(tableName, "chain_id")
	_rule.ListenPort = field.NewInt32(tableName, "listen_port")
	_rule.RemoteAddr = field.NewString(tableName, "remote_addr")
	_rule.Protocol = field.NewString(tableName, "protocol")
	_rule.Traffic = field.NewInt64(tableName, "traffic")
	_rule.UserID = field.NewInt32(tableName, "user_id")
	_rule.Node = ruleHasOneNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "entity.Node"),
	}

	_rule.Chain = ruleHasOneChain{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Chain", "entity.Chain"),
		Node: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Chain.Node", "entity.Node"),
		},
	}

	_rule.fillFieldMap()

	return _rule
}

type rule struct {
	ruleDo ruleDo

	ALL        field.Asterisk
	ID         field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	RuleName   field.String
	NodeID     field.Int64
	ChainID    field.Int64
	ListenPort field.Int32
	RemoteAddr field.String
	Protocol   field.String
	Traffic    field.Int64 // 消耗
	UserID     field.Int32
	Node       ruleHasOneNode

	Chain ruleHasOneChain

	fieldMap map[string]field.Expr
}

func (r rule) Table(newTableName string) *rule {
	r.ruleDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rule) As(alias string) *rule {
	r.ruleDo.DO = *(r.ruleDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rule) updateTableName(table string) *rule {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.RuleName = field.NewString(table, "rule_name")
	r.NodeID = field.NewInt64(table, "node_id")
	r.ChainID = field.NewInt64(table, "chain_id")
	r.ListenPort = field.NewInt32(table, "listen_port")
	r.RemoteAddr = field.NewString(table, "remote_addr")
	r.Protocol = field.NewString(table, "protocol")
	r.Traffic = field.NewInt64(table, "traffic")
	r.UserID = field.NewInt32(table, "user_id")

	r.fillFieldMap()

	return r
}

func (r *rule) WithContext(ctx context.Context) *ruleDo { return r.ruleDo.WithContext(ctx) }

func (r rule) TableName() string { return r.ruleDo.TableName() }

func (r rule) Alias() string { return r.ruleDo.Alias() }

func (r rule) Columns(cols ...field.Expr) gen.Columns { return r.ruleDo.Columns(cols...) }

func (r *rule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rule) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["rule_name"] = r.RuleName
	r.fieldMap["node_id"] = r.NodeID
	r.fieldMap["chain_id"] = r.ChainID
	r.fieldMap["listen_port"] = r.ListenPort
	r.fieldMap["remote_addr"] = r.RemoteAddr
	r.fieldMap["protocol"] = r.Protocol
	r.fieldMap["traffic"] = r.Traffic
	r.fieldMap["user_id"] = r.UserID

}

func (r rule) clone(db *gorm.DB) rule {
	r.ruleDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rule) replaceDB(db *gorm.DB) rule {
	r.ruleDo.ReplaceDB(db)
	return r
}

type ruleHasOneNode struct {
	db *gorm.DB

	field.RelationField
}

func (a ruleHasOneNode) Where(conds ...field.Expr) *ruleHasOneNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a ruleHasOneNode) WithContext(ctx context.Context) *ruleHasOneNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a ruleHasOneNode) Session(session *gorm.Session) *ruleHasOneNode {
	a.db = a.db.Session(session)
	return &a
}

func (a ruleHasOneNode) Model(m *entity.Rule) *ruleHasOneNodeTx {
	return &ruleHasOneNodeTx{a.db.Model(m).Association(a.Name())}
}

type ruleHasOneNodeTx struct{ tx *gorm.Association }

func (a ruleHasOneNodeTx) Find() (result *entity.Node, err error) {
	return result, a.tx.Find(&result)
}

func (a ruleHasOneNodeTx) Append(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a ruleHasOneNodeTx) Replace(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a ruleHasOneNodeTx) Delete(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a ruleHasOneNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a ruleHasOneNodeTx) Count() int64 {
	return a.tx.Count()
}

type ruleHasOneChain struct {
	db *gorm.DB

	field.RelationField

	Node struct {
		field.RelationField
	}
}

func (a ruleHasOneChain) Where(conds ...field.Expr) *ruleHasOneChain {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a ruleHasOneChain) WithContext(ctx context.Context) *ruleHasOneChain {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a ruleHasOneChain) Session(session *gorm.Session) *ruleHasOneChain {
	a.db = a.db.Session(session)
	return &a
}

func (a ruleHasOneChain) Model(m *entity.Rule) *ruleHasOneChainTx {
	return &ruleHasOneChainTx{a.db.Model(m).Association(a.Name())}
}

type ruleHasOneChainTx struct{ tx *gorm.Association }

func (a ruleHasOneChainTx) Find() (result *entity.Chain, err error) {
	return result, a.tx.Find(&result)
}

func (a ruleHasOneChainTx) Append(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a ruleHasOneChainTx) Replace(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a ruleHasOneChainTx) Delete(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a ruleHasOneChainTx) Clear() error {
	return a.tx.Clear()
}

func (a ruleHasOneChainTx) Count() int64 {
	return a.tx.Count()
}

type ruleDo struct{ gen.DO }

func (r ruleDo) Debug() *ruleDo {
	return r.withDO(r.DO.Debug())
}

func (r ruleDo) WithContext(ctx context.Context) *ruleDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r ruleDo) ReadDB() *ruleDo {
	return r.Clauses(dbresolver.Read)
}

func (r ruleDo) WriteDB() *ruleDo {
	return r.Clauses(dbresolver.Write)
}

func (r ruleDo) Session(config *gorm.Session) *ruleDo {
	return r.withDO(r.DO.Session(config))
}

func (r ruleDo) Clauses(conds ...clause.Expression) *ruleDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r ruleDo) Returning(value interface{}, columns ...string) *ruleDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r ruleDo) Not(conds ...gen.Condition) *ruleDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r ruleDo) Or(conds ...gen.Condition) *ruleDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r ruleDo) Select(conds ...field.Expr) *ruleDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r ruleDo) Where(conds ...gen.Condition) *ruleDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r ruleDo) Order(conds ...field.Expr) *ruleDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r ruleDo) Distinct(cols ...field.Expr) *ruleDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r ruleDo) Omit(cols ...field.Expr) *ruleDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r ruleDo) Join(table schema.Tabler, on ...field.Expr) *ruleDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r ruleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ruleDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r ruleDo) RightJoin(table schema.Tabler, on ...field.Expr) *ruleDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r ruleDo) Group(cols ...field.Expr) *ruleDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r ruleDo) Having(conds ...gen.Condition) *ruleDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r ruleDo) Limit(limit int) *ruleDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r ruleDo) Offset(offset int) *ruleDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r ruleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ruleDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r ruleDo) Unscoped() *ruleDo {
	return r.withDO(r.DO.Unscoped())
}

func (r ruleDo) Create(values ...*entity.Rule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r ruleDo) CreateInBatches(values []*entity.Rule, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r ruleDo) Save(values ...*entity.Rule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r ruleDo) First() (*entity.Rule, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Rule), nil
	}
}

func (r ruleDo) Take() (*entity.Rule, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Rule), nil
	}
}

func (r ruleDo) Last() (*entity.Rule, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Rule), nil
	}
}

func (r ruleDo) Find() ([]*entity.Rule, error) {
	result, err := r.DO.Find()
	return result.([]*entity.Rule), err
}

func (r ruleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Rule, err error) {
	buf := make([]*entity.Rule, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r ruleDo) FindInBatches(result *[]*entity.Rule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r ruleDo) Attrs(attrs ...field.AssignExpr) *ruleDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r ruleDo) Assign(attrs ...field.AssignExpr) *ruleDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r ruleDo) Joins(fields ...field.RelationField) *ruleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r ruleDo) Preload(fields ...field.RelationField) *ruleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r ruleDo) FirstOrInit() (*entity.Rule, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Rule), nil
	}
}

func (r ruleDo) FirstOrCreate() (*entity.Rule, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Rule), nil
	}
}

func (r ruleDo) FindByPage(offset int, limit int) (result []*entity.Rule, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r ruleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r ruleDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r ruleDo) Delete(models ...*entity.Rule) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *ruleDo) withDO(do gen.Dao) *ruleDo {
	r.DO = *do.(*gen.DO)
	return r
}
