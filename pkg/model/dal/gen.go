// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	Chain                *chain
	Node                 *node
	Rule                 *rule
	TrafficPlan          *trafficPlan
	User                 *user
	UserDailyTraffic     *userDailyTraffic
	UserRoleChainMapping *userRoleChainMapping
	UserRoleNodeMapping  *userRoleNodeMapping
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Chain = &Q.Chain
	Node = &Q.Node
	Rule = &Q.Rule
	TrafficPlan = &Q.TrafficPlan
	User = &Q.User
	UserDailyTraffic = &Q.UserDailyTraffic
	UserRoleChainMapping = &Q.UserRoleChainMapping
	UserRoleNodeMapping = &Q.UserRoleNodeMapping
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		Chain:                newChain(db, opts...),
		Node:                 newNode(db, opts...),
		Rule:                 newRule(db, opts...),
		TrafficPlan:          newTrafficPlan(db, opts...),
		User:                 newUser(db, opts...),
		UserDailyTraffic:     newUserDailyTraffic(db, opts...),
		UserRoleChainMapping: newUserRoleChainMapping(db, opts...),
		UserRoleNodeMapping:  newUserRoleNodeMapping(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Chain                chain
	Node                 node
	Rule                 rule
	TrafficPlan          trafficPlan
	User                 user
	UserDailyTraffic     userDailyTraffic
	UserRoleChainMapping userRoleChainMapping
	UserRoleNodeMapping  userRoleNodeMapping
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Chain:                q.Chain.clone(db),
		Node:                 q.Node.clone(db),
		Rule:                 q.Rule.clone(db),
		TrafficPlan:          q.TrafficPlan.clone(db),
		User:                 q.User.clone(db),
		UserDailyTraffic:     q.UserDailyTraffic.clone(db),
		UserRoleChainMapping: q.UserRoleChainMapping.clone(db),
		UserRoleNodeMapping:  q.UserRoleNodeMapping.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Chain:                q.Chain.replaceDB(db),
		Node:                 q.Node.replaceDB(db),
		Rule:                 q.Rule.replaceDB(db),
		TrafficPlan:          q.TrafficPlan.replaceDB(db),
		User:                 q.User.replaceDB(db),
		UserDailyTraffic:     q.UserDailyTraffic.replaceDB(db),
		UserRoleChainMapping: q.UserRoleChainMapping.replaceDB(db),
		UserRoleNodeMapping:  q.UserRoleNodeMapping.replaceDB(db),
	}
}

type queryCtx struct {
	Chain                *chainDo
	Node                 *nodeDo
	Rule                 *ruleDo
	TrafficPlan          *trafficPlanDo
	User                 *userDo
	UserDailyTraffic     *userDailyTrafficDo
	UserRoleChainMapping *userRoleChainMappingDo
	UserRoleNodeMapping  *userRoleNodeMappingDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Chain:                q.Chain.WithContext(ctx),
		Node:                 q.Node.WithContext(ctx),
		Rule:                 q.Rule.WithContext(ctx),
		TrafficPlan:          q.TrafficPlan.WithContext(ctx),
		User:                 q.User.WithContext(ctx),
		UserDailyTraffic:     q.UserDailyTraffic.WithContext(ctx),
		UserRoleChainMapping: q.UserRoleChainMapping.WithContext(ctx),
		UserRoleNodeMapping:  q.UserRoleNodeMapping.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
