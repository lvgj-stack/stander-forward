// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newTrafficPlan(db *gorm.DB, opts ...gen.DOOption) trafficPlan {
	_trafficPlan := trafficPlan{}

	_trafficPlan.trafficPlanDo.UseDB(db, opts...)
	_trafficPlan.trafficPlanDo.UseModel(&entity.TrafficPlan{})

	tableName := _trafficPlan.trafficPlanDo.TableName()
	_trafficPlan.ALL = field.NewAsterisk(tableName)
	_trafficPlan.ID = field.NewInt64(tableName, "id")
	_trafficPlan.CreatedAt = field.NewTime(tableName, "created_at")
	_trafficPlan.UpdatedAt = field.NewTime(tableName, "updated_at")
	_trafficPlan.DeletedAt = field.NewField(tableName, "deleted_at")
	_trafficPlan.TotalTraffic = field.NewInt64(tableName, "total_traffic")
	_trafficPlan.Period = field.NewInt32(tableName, "period")
	_trafficPlan.PlanName = field.NewString(tableName, "plan_name")

	_trafficPlan.fillFieldMap()

	return _trafficPlan
}

type trafficPlan struct {
	trafficPlanDo trafficPlanDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TotalTraffic field.Int64 // 消耗
	Period       field.Int32
	PlanName     field.String

	fieldMap map[string]field.Expr
}

func (t trafficPlan) Table(newTableName string) *trafficPlan {
	t.trafficPlanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trafficPlan) As(alias string) *trafficPlan {
	t.trafficPlanDo.DO = *(t.trafficPlanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trafficPlan) updateTableName(table string) *trafficPlan {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TotalTraffic = field.NewInt64(table, "total_traffic")
	t.Period = field.NewInt32(table, "period")
	t.PlanName = field.NewString(table, "plan_name")

	t.fillFieldMap()

	return t
}

func (t *trafficPlan) WithContext(ctx context.Context) *trafficPlanDo {
	return t.trafficPlanDo.WithContext(ctx)
}

func (t trafficPlan) TableName() string { return t.trafficPlanDo.TableName() }

func (t trafficPlan) Alias() string { return t.trafficPlanDo.Alias() }

func (t trafficPlan) Columns(cols ...field.Expr) gen.Columns { return t.trafficPlanDo.Columns(cols...) }

func (t *trafficPlan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trafficPlan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["total_traffic"] = t.TotalTraffic
	t.fieldMap["period"] = t.Period
	t.fieldMap["plan_name"] = t.PlanName
}

func (t trafficPlan) clone(db *gorm.DB) trafficPlan {
	t.trafficPlanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trafficPlan) replaceDB(db *gorm.DB) trafficPlan {
	t.trafficPlanDo.ReplaceDB(db)
	return t
}

type trafficPlanDo struct{ gen.DO }

func (t trafficPlanDo) Debug() *trafficPlanDo {
	return t.withDO(t.DO.Debug())
}

func (t trafficPlanDo) WithContext(ctx context.Context) *trafficPlanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trafficPlanDo) ReadDB() *trafficPlanDo {
	return t.Clauses(dbresolver.Read)
}

func (t trafficPlanDo) WriteDB() *trafficPlanDo {
	return t.Clauses(dbresolver.Write)
}

func (t trafficPlanDo) Session(config *gorm.Session) *trafficPlanDo {
	return t.withDO(t.DO.Session(config))
}

func (t trafficPlanDo) Clauses(conds ...clause.Expression) *trafficPlanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trafficPlanDo) Returning(value interface{}, columns ...string) *trafficPlanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trafficPlanDo) Not(conds ...gen.Condition) *trafficPlanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trafficPlanDo) Or(conds ...gen.Condition) *trafficPlanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trafficPlanDo) Select(conds ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trafficPlanDo) Where(conds ...gen.Condition) *trafficPlanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trafficPlanDo) Order(conds ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trafficPlanDo) Distinct(cols ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trafficPlanDo) Omit(cols ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trafficPlanDo) Join(table schema.Tabler, on ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trafficPlanDo) LeftJoin(table schema.Tabler, on ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trafficPlanDo) RightJoin(table schema.Tabler, on ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trafficPlanDo) Group(cols ...field.Expr) *trafficPlanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trafficPlanDo) Having(conds ...gen.Condition) *trafficPlanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trafficPlanDo) Limit(limit int) *trafficPlanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trafficPlanDo) Offset(offset int) *trafficPlanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trafficPlanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *trafficPlanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trafficPlanDo) Unscoped() *trafficPlanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trafficPlanDo) Create(values ...*entity.TrafficPlan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trafficPlanDo) CreateInBatches(values []*entity.TrafficPlan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trafficPlanDo) Save(values ...*entity.TrafficPlan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trafficPlanDo) First() (*entity.TrafficPlan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TrafficPlan), nil
	}
}

func (t trafficPlanDo) Take() (*entity.TrafficPlan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TrafficPlan), nil
	}
}

func (t trafficPlanDo) Last() (*entity.TrafficPlan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TrafficPlan), nil
	}
}

func (t trafficPlanDo) Find() ([]*entity.TrafficPlan, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TrafficPlan), err
}

func (t trafficPlanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TrafficPlan, err error) {
	buf := make([]*entity.TrafficPlan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trafficPlanDo) FindInBatches(result *[]*entity.TrafficPlan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trafficPlanDo) Attrs(attrs ...field.AssignExpr) *trafficPlanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trafficPlanDo) Assign(attrs ...field.AssignExpr) *trafficPlanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trafficPlanDo) Joins(fields ...field.RelationField) *trafficPlanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trafficPlanDo) Preload(fields ...field.RelationField) *trafficPlanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trafficPlanDo) FirstOrInit() (*entity.TrafficPlan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TrafficPlan), nil
	}
}

func (t trafficPlanDo) FirstOrCreate() (*entity.TrafficPlan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TrafficPlan), nil
	}
}

func (t trafficPlanDo) FindByPage(offset int, limit int) (result []*entity.TrafficPlan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trafficPlanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trafficPlanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trafficPlanDo) Delete(models ...*entity.TrafficPlan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trafficPlanDo) withDO(do gen.Dao) *trafficPlanDo {
	t.DO = *do.(*gen.DO)
	return t
}
