// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newUserRoleChainMapping(db *gorm.DB, opts ...gen.DOOption) userRoleChainMapping {
	_userRoleChainMapping := userRoleChainMapping{}

	_userRoleChainMapping.userRoleChainMappingDo.UseDB(db, opts...)
	_userRoleChainMapping.userRoleChainMappingDo.UseModel(&entity.UserRoleChainMapping{})

	tableName := _userRoleChainMapping.userRoleChainMappingDo.TableName()
	_userRoleChainMapping.ALL = field.NewAsterisk(tableName)
	_userRoleChainMapping.UserID = field.NewInt32(tableName, "user_id")
	_userRoleChainMapping.RoleCode = field.NewString(tableName, "role_code")
	_userRoleChainMapping.ChainID = field.NewInt32(tableName, "chain_id")
	_userRoleChainMapping.Chain = userRoleChainMappingHasOneChain{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Chain", "entity.Chain"),
		Node: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Chain.Node", "entity.Node"),
		},
	}

	_userRoleChainMapping.fillFieldMap()

	return _userRoleChainMapping
}

type userRoleChainMapping struct {
	userRoleChainMappingDo userRoleChainMappingDo

	ALL      field.Asterisk
	UserID   field.Int32
	RoleCode field.String
	ChainID  field.Int32
	Chain    userRoleChainMappingHasOneChain

	fieldMap map[string]field.Expr
}

func (u userRoleChainMapping) Table(newTableName string) *userRoleChainMapping {
	u.userRoleChainMappingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoleChainMapping) As(alias string) *userRoleChainMapping {
	u.userRoleChainMappingDo.DO = *(u.userRoleChainMappingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoleChainMapping) updateTableName(table string) *userRoleChainMapping {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.RoleCode = field.NewString(table, "role_code")
	u.ChainID = field.NewInt32(table, "chain_id")

	u.fillFieldMap()

	return u
}

func (u *userRoleChainMapping) WithContext(ctx context.Context) *userRoleChainMappingDo {
	return u.userRoleChainMappingDo.WithContext(ctx)
}

func (u userRoleChainMapping) TableName() string { return u.userRoleChainMappingDo.TableName() }

func (u userRoleChainMapping) Alias() string { return u.userRoleChainMappingDo.Alias() }

func (u userRoleChainMapping) Columns(cols ...field.Expr) gen.Columns {
	return u.userRoleChainMappingDo.Columns(cols...)
}

func (u *userRoleChainMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoleChainMapping) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["role_code"] = u.RoleCode
	u.fieldMap["chain_id"] = u.ChainID

}

func (u userRoleChainMapping) clone(db *gorm.DB) userRoleChainMapping {
	u.userRoleChainMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoleChainMapping) replaceDB(db *gorm.DB) userRoleChainMapping {
	u.userRoleChainMappingDo.ReplaceDB(db)
	return u
}

type userRoleChainMappingHasOneChain struct {
	db *gorm.DB

	field.RelationField

	Node struct {
		field.RelationField
	}
}

func (a userRoleChainMappingHasOneChain) Where(conds ...field.Expr) *userRoleChainMappingHasOneChain {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userRoleChainMappingHasOneChain) WithContext(ctx context.Context) *userRoleChainMappingHasOneChain {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userRoleChainMappingHasOneChain) Session(session *gorm.Session) *userRoleChainMappingHasOneChain {
	a.db = a.db.Session(session)
	return &a
}

func (a userRoleChainMappingHasOneChain) Model(m *entity.UserRoleChainMapping) *userRoleChainMappingHasOneChainTx {
	return &userRoleChainMappingHasOneChainTx{a.db.Model(m).Association(a.Name())}
}

type userRoleChainMappingHasOneChainTx struct{ tx *gorm.Association }

func (a userRoleChainMappingHasOneChainTx) Find() (result *entity.Chain, err error) {
	return result, a.tx.Find(&result)
}

func (a userRoleChainMappingHasOneChainTx) Append(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userRoleChainMappingHasOneChainTx) Replace(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userRoleChainMappingHasOneChainTx) Delete(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userRoleChainMappingHasOneChainTx) Clear() error {
	return a.tx.Clear()
}

func (a userRoleChainMappingHasOneChainTx) Count() int64 {
	return a.tx.Count()
}

type userRoleChainMappingDo struct{ gen.DO }

func (u userRoleChainMappingDo) Debug() *userRoleChainMappingDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoleChainMappingDo) WithContext(ctx context.Context) *userRoleChainMappingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoleChainMappingDo) ReadDB() *userRoleChainMappingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoleChainMappingDo) WriteDB() *userRoleChainMappingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoleChainMappingDo) Session(config *gorm.Session) *userRoleChainMappingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoleChainMappingDo) Clauses(conds ...clause.Expression) *userRoleChainMappingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoleChainMappingDo) Returning(value interface{}, columns ...string) *userRoleChainMappingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoleChainMappingDo) Not(conds ...gen.Condition) *userRoleChainMappingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoleChainMappingDo) Or(conds ...gen.Condition) *userRoleChainMappingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoleChainMappingDo) Select(conds ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoleChainMappingDo) Where(conds ...gen.Condition) *userRoleChainMappingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoleChainMappingDo) Order(conds ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoleChainMappingDo) Distinct(cols ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoleChainMappingDo) Omit(cols ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoleChainMappingDo) Join(table schema.Tabler, on ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoleChainMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoleChainMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoleChainMappingDo) Group(cols ...field.Expr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoleChainMappingDo) Having(conds ...gen.Condition) *userRoleChainMappingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoleChainMappingDo) Limit(limit int) *userRoleChainMappingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoleChainMappingDo) Offset(offset int) *userRoleChainMappingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoleChainMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userRoleChainMappingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoleChainMappingDo) Unscoped() *userRoleChainMappingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoleChainMappingDo) Create(values ...*entity.UserRoleChainMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoleChainMappingDo) CreateInBatches(values []*entity.UserRoleChainMapping, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoleChainMappingDo) Save(values ...*entity.UserRoleChainMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoleChainMappingDo) First() (*entity.UserRoleChainMapping, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleChainMapping), nil
	}
}

func (u userRoleChainMappingDo) Take() (*entity.UserRoleChainMapping, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleChainMapping), nil
	}
}

func (u userRoleChainMappingDo) Last() (*entity.UserRoleChainMapping, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleChainMapping), nil
	}
}

func (u userRoleChainMappingDo) Find() ([]*entity.UserRoleChainMapping, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserRoleChainMapping), err
}

func (u userRoleChainMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserRoleChainMapping, err error) {
	buf := make([]*entity.UserRoleChainMapping, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoleChainMappingDo) FindInBatches(result *[]*entity.UserRoleChainMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoleChainMappingDo) Attrs(attrs ...field.AssignExpr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoleChainMappingDo) Assign(attrs ...field.AssignExpr) *userRoleChainMappingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoleChainMappingDo) Joins(fields ...field.RelationField) *userRoleChainMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoleChainMappingDo) Preload(fields ...field.RelationField) *userRoleChainMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoleChainMappingDo) FirstOrInit() (*entity.UserRoleChainMapping, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleChainMapping), nil
	}
}

func (u userRoleChainMappingDo) FirstOrCreate() (*entity.UserRoleChainMapping, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleChainMapping), nil
	}
}

func (u userRoleChainMappingDo) FindByPage(offset int, limit int) (result []*entity.UserRoleChainMapping, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoleChainMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoleChainMappingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoleChainMappingDo) Delete(models ...*entity.UserRoleChainMapping) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoleChainMappingDo) withDO(do gen.Dao) *userRoleChainMappingDo {
	u.DO = *do.(*gen.DO)
	return u
}
