// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newNodeChainMapping(db *gorm.DB, opts ...gen.DOOption) nodeChainMapping {
	_nodeChainMapping := nodeChainMapping{}

	_nodeChainMapping.nodeChainMappingDo.UseDB(db, opts...)
	_nodeChainMapping.nodeChainMappingDo.UseModel(&entity.NodeChainMapping{})

	tableName := _nodeChainMapping.nodeChainMappingDo.TableName()
	_nodeChainMapping.ALL = field.NewAsterisk(tableName)
	_nodeChainMapping.NodeID = field.NewInt64(tableName, "node_id")
	_nodeChainMapping.ChainID = field.NewInt64(tableName, "chain_id")

	_nodeChainMapping.fillFieldMap()

	return _nodeChainMapping
}

type nodeChainMapping struct {
	nodeChainMappingDo nodeChainMappingDo

	ALL     field.Asterisk
	NodeID  field.Int64
	ChainID field.Int64

	fieldMap map[string]field.Expr
}

func (n nodeChainMapping) Table(newTableName string) *nodeChainMapping {
	n.nodeChainMappingDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeChainMapping) As(alias string) *nodeChainMapping {
	n.nodeChainMappingDo.DO = *(n.nodeChainMappingDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeChainMapping) updateTableName(table string) *nodeChainMapping {
	n.ALL = field.NewAsterisk(table)
	n.NodeID = field.NewInt64(table, "node_id")
	n.ChainID = field.NewInt64(table, "chain_id")

	n.fillFieldMap()

	return n
}

func (n *nodeChainMapping) WithContext(ctx context.Context) *nodeChainMappingDo {
	return n.nodeChainMappingDo.WithContext(ctx)
}

func (n nodeChainMapping) TableName() string { return n.nodeChainMappingDo.TableName() }

func (n nodeChainMapping) Alias() string { return n.nodeChainMappingDo.Alias() }

func (n nodeChainMapping) Columns(cols ...field.Expr) gen.Columns {
	return n.nodeChainMappingDo.Columns(cols...)
}

func (n *nodeChainMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeChainMapping) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 2)
	n.fieldMap["node_id"] = n.NodeID
	n.fieldMap["chain_id"] = n.ChainID
}

func (n nodeChainMapping) clone(db *gorm.DB) nodeChainMapping {
	n.nodeChainMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeChainMapping) replaceDB(db *gorm.DB) nodeChainMapping {
	n.nodeChainMappingDo.ReplaceDB(db)
	return n
}

type nodeChainMappingDo struct{ gen.DO }

func (n nodeChainMappingDo) Debug() *nodeChainMappingDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeChainMappingDo) WithContext(ctx context.Context) *nodeChainMappingDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeChainMappingDo) ReadDB() *nodeChainMappingDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeChainMappingDo) WriteDB() *nodeChainMappingDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeChainMappingDo) Session(config *gorm.Session) *nodeChainMappingDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeChainMappingDo) Clauses(conds ...clause.Expression) *nodeChainMappingDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeChainMappingDo) Returning(value interface{}, columns ...string) *nodeChainMappingDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeChainMappingDo) Not(conds ...gen.Condition) *nodeChainMappingDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeChainMappingDo) Or(conds ...gen.Condition) *nodeChainMappingDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeChainMappingDo) Select(conds ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeChainMappingDo) Where(conds ...gen.Condition) *nodeChainMappingDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeChainMappingDo) Order(conds ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeChainMappingDo) Distinct(cols ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeChainMappingDo) Omit(cols ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeChainMappingDo) Join(table schema.Tabler, on ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeChainMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeChainMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeChainMappingDo) Group(cols ...field.Expr) *nodeChainMappingDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeChainMappingDo) Having(conds ...gen.Condition) *nodeChainMappingDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeChainMappingDo) Limit(limit int) *nodeChainMappingDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeChainMappingDo) Offset(offset int) *nodeChainMappingDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeChainMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *nodeChainMappingDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeChainMappingDo) Unscoped() *nodeChainMappingDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeChainMappingDo) Create(values ...*entity.NodeChainMapping) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeChainMappingDo) CreateInBatches(values []*entity.NodeChainMapping, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeChainMappingDo) Save(values ...*entity.NodeChainMapping) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeChainMappingDo) First() (*entity.NodeChainMapping, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NodeChainMapping), nil
	}
}

func (n nodeChainMappingDo) Take() (*entity.NodeChainMapping, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NodeChainMapping), nil
	}
}

func (n nodeChainMappingDo) Last() (*entity.NodeChainMapping, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NodeChainMapping), nil
	}
}

func (n nodeChainMappingDo) Find() ([]*entity.NodeChainMapping, error) {
	result, err := n.DO.Find()
	return result.([]*entity.NodeChainMapping), err
}

func (n nodeChainMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.NodeChainMapping, err error) {
	buf := make([]*entity.NodeChainMapping, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeChainMappingDo) FindInBatches(result *[]*entity.NodeChainMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeChainMappingDo) Attrs(attrs ...field.AssignExpr) *nodeChainMappingDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeChainMappingDo) Assign(attrs ...field.AssignExpr) *nodeChainMappingDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeChainMappingDo) Joins(fields ...field.RelationField) *nodeChainMappingDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeChainMappingDo) Preload(fields ...field.RelationField) *nodeChainMappingDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeChainMappingDo) FirstOrInit() (*entity.NodeChainMapping, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NodeChainMapping), nil
	}
}

func (n nodeChainMappingDo) FirstOrCreate() (*entity.NodeChainMapping, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NodeChainMapping), nil
	}
}

func (n nodeChainMappingDo) FindByPage(offset int, limit int) (result []*entity.NodeChainMapping, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeChainMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeChainMappingDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeChainMappingDo) Delete(models ...*entity.NodeChainMapping) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeChainMappingDo) withDO(do gen.Dao) *nodeChainMappingDo {
	n.DO = *do.(*gen.DO)
	return n
}
