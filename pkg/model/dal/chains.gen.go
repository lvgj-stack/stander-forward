// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newChain(db *gorm.DB, opts ...gen.DOOption) chain {
	_chain := chain{}

	_chain.chainDo.UseDB(db, opts...)
	_chain.chainDo.UseModel(&entity.Chain{})

	tableName := _chain.chainDo.TableName()
	_chain.ALL = field.NewAsterisk(tableName)
	_chain.ID = field.NewInt64(tableName, "id")
	_chain.CreatedAt = field.NewTime(tableName, "created_at")
	_chain.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chain.DeletedAt = field.NewField(tableName, "deleted_at")
	_chain.ChainName = field.NewString(tableName, "chain_name")
	_chain.IP = field.NewString(tableName, "ip")
	_chain.Port = field.NewInt32(tableName, "port")
	_chain.Protocol = field.NewString(tableName, "protocol")
	_chain.Key = field.NewString(tableName, "key")
	_chain.NodeID = field.NewInt64(tableName, "node_id")
	_chain.Node = chainHasOneNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "entity.Node"),
	}

	_chain.fillFieldMap()

	return _chain
}

type chain struct {
	chainDo chainDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ChainName field.String
	IP        field.String
	Port      field.Int32
	Protocol  field.String
	Key       field.String
	NodeID    field.Int64
	Node      chainHasOneNode

	fieldMap map[string]field.Expr
}

func (c chain) Table(newTableName string) *chain {
	c.chainDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chain) As(alias string) *chain {
	c.chainDo.DO = *(c.chainDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chain) updateTableName(table string) *chain {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.ChainName = field.NewString(table, "chain_name")
	c.IP = field.NewString(table, "ip")
	c.Port = field.NewInt32(table, "port")
	c.Protocol = field.NewString(table, "protocol")
	c.Key = field.NewString(table, "key")
	c.NodeID = field.NewInt64(table, "node_id")

	c.fillFieldMap()

	return c
}

func (c *chain) WithContext(ctx context.Context) *chainDo { return c.chainDo.WithContext(ctx) }

func (c chain) TableName() string { return c.chainDo.TableName() }

func (c chain) Alias() string { return c.chainDo.Alias() }

func (c chain) Columns(cols ...field.Expr) gen.Columns { return c.chainDo.Columns(cols...) }

func (c *chain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chain) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["chain_name"] = c.ChainName
	c.fieldMap["ip"] = c.IP
	c.fieldMap["port"] = c.Port
	c.fieldMap["protocol"] = c.Protocol
	c.fieldMap["key"] = c.Key
	c.fieldMap["node_id"] = c.NodeID

}

func (c chain) clone(db *gorm.DB) chain {
	c.chainDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chain) replaceDB(db *gorm.DB) chain {
	c.chainDo.ReplaceDB(db)
	return c
}

type chainHasOneNode struct {
	db *gorm.DB

	field.RelationField
}

func (a chainHasOneNode) Where(conds ...field.Expr) *chainHasOneNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chainHasOneNode) WithContext(ctx context.Context) *chainHasOneNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chainHasOneNode) Session(session *gorm.Session) *chainHasOneNode {
	a.db = a.db.Session(session)
	return &a
}

func (a chainHasOneNode) Model(m *entity.Chain) *chainHasOneNodeTx {
	return &chainHasOneNodeTx{a.db.Model(m).Association(a.Name())}
}

type chainHasOneNodeTx struct{ tx *gorm.Association }

func (a chainHasOneNodeTx) Find() (result *entity.Node, err error) {
	return result, a.tx.Find(&result)
}

func (a chainHasOneNodeTx) Append(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chainHasOneNodeTx) Replace(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chainHasOneNodeTx) Delete(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chainHasOneNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a chainHasOneNodeTx) Count() int64 {
	return a.tx.Count()
}

type chainDo struct{ gen.DO }

func (c chainDo) Debug() *chainDo {
	return c.withDO(c.DO.Debug())
}

func (c chainDo) WithContext(ctx context.Context) *chainDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainDo) ReadDB() *chainDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainDo) WriteDB() *chainDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainDo) Session(config *gorm.Session) *chainDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainDo) Clauses(conds ...clause.Expression) *chainDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainDo) Returning(value interface{}, columns ...string) *chainDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainDo) Not(conds ...gen.Condition) *chainDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainDo) Or(conds ...gen.Condition) *chainDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainDo) Select(conds ...field.Expr) *chainDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainDo) Where(conds ...gen.Condition) *chainDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainDo) Order(conds ...field.Expr) *chainDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainDo) Distinct(cols ...field.Expr) *chainDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainDo) Omit(cols ...field.Expr) *chainDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainDo) Join(table schema.Tabler, on ...field.Expr) *chainDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chainDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainDo) RightJoin(table schema.Tabler, on ...field.Expr) *chainDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainDo) Group(cols ...field.Expr) *chainDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainDo) Having(conds ...gen.Condition) *chainDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainDo) Limit(limit int) *chainDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainDo) Offset(offset int) *chainDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chainDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainDo) Unscoped() *chainDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainDo) Create(values ...*entity.Chain) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainDo) CreateInBatches(values []*entity.Chain, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainDo) Save(values ...*entity.Chain) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainDo) First() (*entity.Chain, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chain), nil
	}
}

func (c chainDo) Take() (*entity.Chain, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chain), nil
	}
}

func (c chainDo) Last() (*entity.Chain, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chain), nil
	}
}

func (c chainDo) Find() ([]*entity.Chain, error) {
	result, err := c.DO.Find()
	return result.([]*entity.Chain), err
}

func (c chainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Chain, err error) {
	buf := make([]*entity.Chain, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainDo) FindInBatches(result *[]*entity.Chain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainDo) Attrs(attrs ...field.AssignExpr) *chainDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainDo) Assign(attrs ...field.AssignExpr) *chainDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainDo) Joins(fields ...field.RelationField) *chainDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainDo) Preload(fields ...field.RelationField) *chainDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainDo) FirstOrInit() (*entity.Chain, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chain), nil
	}
}

func (c chainDo) FirstOrCreate() (*entity.Chain, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Chain), nil
	}
}

func (c chainDo) FindByPage(offset int, limit int) (result []*entity.Chain, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainDo) Delete(models ...*entity.Chain) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainDo) withDO(do gen.Dao) *chainDo {
	c.DO = *do.(*gen.DO)
	return c
}
