// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newUserRoleNodeMapping(db *gorm.DB, opts ...gen.DOOption) userRoleNodeMapping {
	_userRoleNodeMapping := userRoleNodeMapping{}

	_userRoleNodeMapping.userRoleNodeMappingDo.UseDB(db, opts...)
	_userRoleNodeMapping.userRoleNodeMappingDo.UseModel(&entity.UserRoleNodeMapping{})

	tableName := _userRoleNodeMapping.userRoleNodeMappingDo.TableName()
	_userRoleNodeMapping.ALL = field.NewAsterisk(tableName)
	_userRoleNodeMapping.UserID = field.NewInt32(tableName, "user_id")
	_userRoleNodeMapping.RoleCode = field.NewString(tableName, "role_code")
	_userRoleNodeMapping.NodeID = field.NewInt32(tableName, "node_id")
	_userRoleNodeMapping.Node = userRoleNodeMappingHasOneNode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Node", "entity.Node"),
	}

	_userRoleNodeMapping.fillFieldMap()

	return _userRoleNodeMapping
}

type userRoleNodeMapping struct {
	userRoleNodeMappingDo userRoleNodeMappingDo

	ALL      field.Asterisk
	UserID   field.Int32
	RoleCode field.String
	NodeID   field.Int32
	Node     userRoleNodeMappingHasOneNode

	fieldMap map[string]field.Expr
}

func (u userRoleNodeMapping) Table(newTableName string) *userRoleNodeMapping {
	u.userRoleNodeMappingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoleNodeMapping) As(alias string) *userRoleNodeMapping {
	u.userRoleNodeMappingDo.DO = *(u.userRoleNodeMappingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoleNodeMapping) updateTableName(table string) *userRoleNodeMapping {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.RoleCode = field.NewString(table, "role_code")
	u.NodeID = field.NewInt32(table, "node_id")

	u.fillFieldMap()

	return u
}

func (u *userRoleNodeMapping) WithContext(ctx context.Context) *userRoleNodeMappingDo {
	return u.userRoleNodeMappingDo.WithContext(ctx)
}

func (u userRoleNodeMapping) TableName() string { return u.userRoleNodeMappingDo.TableName() }

func (u userRoleNodeMapping) Alias() string { return u.userRoleNodeMappingDo.Alias() }

func (u userRoleNodeMapping) Columns(cols ...field.Expr) gen.Columns {
	return u.userRoleNodeMappingDo.Columns(cols...)
}

func (u *userRoleNodeMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoleNodeMapping) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["role_code"] = u.RoleCode
	u.fieldMap["node_id"] = u.NodeID

}

func (u userRoleNodeMapping) clone(db *gorm.DB) userRoleNodeMapping {
	u.userRoleNodeMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoleNodeMapping) replaceDB(db *gorm.DB) userRoleNodeMapping {
	u.userRoleNodeMappingDo.ReplaceDB(db)
	return u
}

type userRoleNodeMappingHasOneNode struct {
	db *gorm.DB

	field.RelationField
}

func (a userRoleNodeMappingHasOneNode) Where(conds ...field.Expr) *userRoleNodeMappingHasOneNode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userRoleNodeMappingHasOneNode) WithContext(ctx context.Context) *userRoleNodeMappingHasOneNode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userRoleNodeMappingHasOneNode) Session(session *gorm.Session) *userRoleNodeMappingHasOneNode {
	a.db = a.db.Session(session)
	return &a
}

func (a userRoleNodeMappingHasOneNode) Model(m *entity.UserRoleNodeMapping) *userRoleNodeMappingHasOneNodeTx {
	return &userRoleNodeMappingHasOneNodeTx{a.db.Model(m).Association(a.Name())}
}

type userRoleNodeMappingHasOneNodeTx struct{ tx *gorm.Association }

func (a userRoleNodeMappingHasOneNodeTx) Find() (result *entity.Node, err error) {
	return result, a.tx.Find(&result)
}

func (a userRoleNodeMappingHasOneNodeTx) Append(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userRoleNodeMappingHasOneNodeTx) Replace(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userRoleNodeMappingHasOneNodeTx) Delete(values ...*entity.Node) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userRoleNodeMappingHasOneNodeTx) Clear() error {
	return a.tx.Clear()
}

func (a userRoleNodeMappingHasOneNodeTx) Count() int64 {
	return a.tx.Count()
}

type userRoleNodeMappingDo struct{ gen.DO }

func (u userRoleNodeMappingDo) Debug() *userRoleNodeMappingDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoleNodeMappingDo) WithContext(ctx context.Context) *userRoleNodeMappingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoleNodeMappingDo) ReadDB() *userRoleNodeMappingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoleNodeMappingDo) WriteDB() *userRoleNodeMappingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoleNodeMappingDo) Session(config *gorm.Session) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoleNodeMappingDo) Clauses(conds ...clause.Expression) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoleNodeMappingDo) Returning(value interface{}, columns ...string) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoleNodeMappingDo) Not(conds ...gen.Condition) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoleNodeMappingDo) Or(conds ...gen.Condition) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoleNodeMappingDo) Select(conds ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoleNodeMappingDo) Where(conds ...gen.Condition) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoleNodeMappingDo) Order(conds ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoleNodeMappingDo) Distinct(cols ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoleNodeMappingDo) Omit(cols ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoleNodeMappingDo) Join(table schema.Tabler, on ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoleNodeMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoleNodeMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoleNodeMappingDo) Group(cols ...field.Expr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoleNodeMappingDo) Having(conds ...gen.Condition) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoleNodeMappingDo) Limit(limit int) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoleNodeMappingDo) Offset(offset int) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoleNodeMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoleNodeMappingDo) Unscoped() *userRoleNodeMappingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoleNodeMappingDo) Create(values ...*entity.UserRoleNodeMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoleNodeMappingDo) CreateInBatches(values []*entity.UserRoleNodeMapping, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoleNodeMappingDo) Save(values ...*entity.UserRoleNodeMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoleNodeMappingDo) First() (*entity.UserRoleNodeMapping, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleNodeMapping), nil
	}
}

func (u userRoleNodeMappingDo) Take() (*entity.UserRoleNodeMapping, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleNodeMapping), nil
	}
}

func (u userRoleNodeMappingDo) Last() (*entity.UserRoleNodeMapping, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleNodeMapping), nil
	}
}

func (u userRoleNodeMappingDo) Find() ([]*entity.UserRoleNodeMapping, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserRoleNodeMapping), err
}

func (u userRoleNodeMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserRoleNodeMapping, err error) {
	buf := make([]*entity.UserRoleNodeMapping, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoleNodeMappingDo) FindInBatches(result *[]*entity.UserRoleNodeMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoleNodeMappingDo) Attrs(attrs ...field.AssignExpr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoleNodeMappingDo) Assign(attrs ...field.AssignExpr) *userRoleNodeMappingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoleNodeMappingDo) Joins(fields ...field.RelationField) *userRoleNodeMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoleNodeMappingDo) Preload(fields ...field.RelationField) *userRoleNodeMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoleNodeMappingDo) FirstOrInit() (*entity.UserRoleNodeMapping, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleNodeMapping), nil
	}
}

func (u userRoleNodeMappingDo) FirstOrCreate() (*entity.UserRoleNodeMapping, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRoleNodeMapping), nil
	}
}

func (u userRoleNodeMappingDo) FindByPage(offset int, limit int) (result []*entity.UserRoleNodeMapping, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoleNodeMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoleNodeMappingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoleNodeMappingDo) Delete(models ...*entity.UserRoleNodeMapping) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoleNodeMappingDo) withDO(do gen.Dao) *userRoleNodeMappingDo {
	u.DO = *do.(*gen.DO)
	return u
}
