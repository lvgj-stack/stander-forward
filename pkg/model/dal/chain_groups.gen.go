// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/stander/pkg/model/entity"
)

func newChainGroup(db *gorm.DB, opts ...gen.DOOption) chainGroup {
	_chainGroup := chainGroup{}

	_chainGroup.chainGroupDo.UseDB(db, opts...)
	_chainGroup.chainGroupDo.UseModel(&entity.ChainGroup{})

	tableName := _chainGroup.chainGroupDo.TableName()
	_chainGroup.ALL = field.NewAsterisk(tableName)
	_chainGroup.ID = field.NewInt64(tableName, "id")
	_chainGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_chainGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chainGroup.DeletedAt = field.NewField(tableName, "deleted_at")
	_chainGroup.ChainID = field.NewInt64(tableName, "chain_id")
	_chainGroup.ChainGroupID = field.NewString(tableName, "chain_group_id")
	_chainGroup.ChainGroupName = field.NewString(tableName, "chain_group_name")
	_chainGroup.ChainName = field.NewString(tableName, "chain_name")
	_chainGroup.Backup = field.NewBool(tableName, "backup")
	_chainGroup.MaxFails = field.NewInt32(tableName, "max_fails")
	_chainGroup.Timeout = field.NewInt32(tableName, "timeout")
	_chainGroup.Weight = field.NewInt32(tableName, "weight")
	_chainGroup.Chain = chainGroupHasOneChain{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Chain", "entity.Chain"),
		Node: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Chain.Node", "entity.Node"),
		},
	}

	_chainGroup.fillFieldMap()

	return _chainGroup
}

type chainGroup struct {
	chainGroupDo chainGroupDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	ChainID        field.Int64
	ChainGroupID   field.String
	ChainGroupName field.String
	ChainName      field.String
	Backup         field.Bool
	MaxFails       field.Int32
	Timeout        field.Int32
	Weight         field.Int32
	Chain          chainGroupHasOneChain

	fieldMap map[string]field.Expr
}

func (c chainGroup) Table(newTableName string) *chainGroup {
	c.chainGroupDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chainGroup) As(alias string) *chainGroup {
	c.chainGroupDo.DO = *(c.chainGroupDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chainGroup) updateTableName(table string) *chainGroup {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.ChainID = field.NewInt64(table, "chain_id")
	c.ChainGroupID = field.NewString(table, "chain_group_id")
	c.ChainGroupName = field.NewString(table, "chain_group_name")
	c.ChainName = field.NewString(table, "chain_name")
	c.Backup = field.NewBool(table, "backup")
	c.MaxFails = field.NewInt32(table, "max_fails")
	c.Timeout = field.NewInt32(table, "timeout")
	c.Weight = field.NewInt32(table, "weight")

	c.fillFieldMap()

	return c
}

func (c *chainGroup) WithContext(ctx context.Context) *chainGroupDo {
	return c.chainGroupDo.WithContext(ctx)
}

func (c chainGroup) TableName() string { return c.chainGroupDo.TableName() }

func (c chainGroup) Alias() string { return c.chainGroupDo.Alias() }

func (c chainGroup) Columns(cols ...field.Expr) gen.Columns { return c.chainGroupDo.Columns(cols...) }

func (c *chainGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chainGroup) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["chain_id"] = c.ChainID
	c.fieldMap["chain_group_id"] = c.ChainGroupID
	c.fieldMap["chain_group_name"] = c.ChainGroupName
	c.fieldMap["chain_name"] = c.ChainName
	c.fieldMap["backup"] = c.Backup
	c.fieldMap["max_fails"] = c.MaxFails
	c.fieldMap["timeout"] = c.Timeout
	c.fieldMap["weight"] = c.Weight

}

func (c chainGroup) clone(db *gorm.DB) chainGroup {
	c.chainGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chainGroup) replaceDB(db *gorm.DB) chainGroup {
	c.chainGroupDo.ReplaceDB(db)
	return c
}

type chainGroupHasOneChain struct {
	db *gorm.DB

	field.RelationField

	Node struct {
		field.RelationField
	}
}

func (a chainGroupHasOneChain) Where(conds ...field.Expr) *chainGroupHasOneChain {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chainGroupHasOneChain) WithContext(ctx context.Context) *chainGroupHasOneChain {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chainGroupHasOneChain) Session(session *gorm.Session) *chainGroupHasOneChain {
	a.db = a.db.Session(session)
	return &a
}

func (a chainGroupHasOneChain) Model(m *entity.ChainGroup) *chainGroupHasOneChainTx {
	return &chainGroupHasOneChainTx{a.db.Model(m).Association(a.Name())}
}

type chainGroupHasOneChainTx struct{ tx *gorm.Association }

func (a chainGroupHasOneChainTx) Find() (result *entity.Chain, err error) {
	return result, a.tx.Find(&result)
}

func (a chainGroupHasOneChainTx) Append(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chainGroupHasOneChainTx) Replace(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chainGroupHasOneChainTx) Delete(values ...*entity.Chain) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chainGroupHasOneChainTx) Clear() error {
	return a.tx.Clear()
}

func (a chainGroupHasOneChainTx) Count() int64 {
	return a.tx.Count()
}

type chainGroupDo struct{ gen.DO }

func (c chainGroupDo) Debug() *chainGroupDo {
	return c.withDO(c.DO.Debug())
}

func (c chainGroupDo) WithContext(ctx context.Context) *chainGroupDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainGroupDo) ReadDB() *chainGroupDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainGroupDo) WriteDB() *chainGroupDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainGroupDo) Session(config *gorm.Session) *chainGroupDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainGroupDo) Clauses(conds ...clause.Expression) *chainGroupDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainGroupDo) Returning(value interface{}, columns ...string) *chainGroupDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainGroupDo) Not(conds ...gen.Condition) *chainGroupDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainGroupDo) Or(conds ...gen.Condition) *chainGroupDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainGroupDo) Select(conds ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainGroupDo) Where(conds ...gen.Condition) *chainGroupDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainGroupDo) Order(conds ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainGroupDo) Distinct(cols ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainGroupDo) Omit(cols ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainGroupDo) Join(table schema.Tabler, on ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainGroupDo) Group(cols ...field.Expr) *chainGroupDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainGroupDo) Having(conds ...gen.Condition) *chainGroupDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainGroupDo) Limit(limit int) *chainGroupDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainGroupDo) Offset(offset int) *chainGroupDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chainGroupDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainGroupDo) Unscoped() *chainGroupDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainGroupDo) Create(values ...*entity.ChainGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainGroupDo) CreateInBatches(values []*entity.ChainGroup, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainGroupDo) Save(values ...*entity.ChainGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainGroupDo) First() (*entity.ChainGroup, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChainGroup), nil
	}
}

func (c chainGroupDo) Take() (*entity.ChainGroup, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChainGroup), nil
	}
}

func (c chainGroupDo) Last() (*entity.ChainGroup, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChainGroup), nil
	}
}

func (c chainGroupDo) Find() ([]*entity.ChainGroup, error) {
	result, err := c.DO.Find()
	return result.([]*entity.ChainGroup), err
}

func (c chainGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ChainGroup, err error) {
	buf := make([]*entity.ChainGroup, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainGroupDo) FindInBatches(result *[]*entity.ChainGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainGroupDo) Attrs(attrs ...field.AssignExpr) *chainGroupDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainGroupDo) Assign(attrs ...field.AssignExpr) *chainGroupDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainGroupDo) Joins(fields ...field.RelationField) *chainGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainGroupDo) Preload(fields ...field.RelationField) *chainGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainGroupDo) FirstOrInit() (*entity.ChainGroup, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChainGroup), nil
	}
}

func (c chainGroupDo) FirstOrCreate() (*entity.ChainGroup, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChainGroup), nil
	}
}

func (c chainGroupDo) FindByPage(offset int, limit int) (result []*entity.ChainGroup, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainGroupDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainGroupDo) Delete(models ...*entity.ChainGroup) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainGroupDo) withDO(do gen.Dao) *chainGroupDo {
	c.DO = *do.(*gen.DO)
	return c
}
